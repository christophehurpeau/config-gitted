[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[user]
  name = Christophe Hurpeau
  email = christophe@hurpeau.com
  signingkey = 534C9ACA

[push]
  default = current
  followTags = true

[pull]
  rebase = true

[rebase]
  autoStash = true
  missingCommitsCheck = warn
  abbreviateCommands = true
  ignoreDate = true

[core]
  editor = nano
  whitespace = trailing-space,space-before-tab,tab-in-indent
  excludesfile = ~/config-gitted/gitignore_global
  ignorecase = true
  attributesfile = /Users/chris/config-gitted/.gitattributes

[web]
  browser = firefox

[color]
  ui = auto # covers diff = true, status = auto, branch = auto
  interactive = auto

[pager]
  diff = false

[diff]
  tool = meld
  compactionHeuristic = true

[difftool]
  prompt = false

[branch]
  autosetuprebase = always

[remote]
  pushDefault = origin

[alias]
  # aliases
  aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
  # wip/unwip
  wip = "!git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m 'feat: --wip-- [skip ci]'"
  unwip = "!git log -n 1 | grep -q -c '\\-\\-wip\\-\\-' && git reset HEAD~1"
  # add
  aa = add --all :/
  # branch
  create-branch = !git-create-branch
  rename = branch -m
  clean-merged ="!git for-each-ref refs/heads/ '--format=%(refname:short)' | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == "-"* ]] && git branch -D $branch; done"
  # commit
  amend = commit --amend --reset-author
  c = commit
  cm = commit -m
  # checkout
  o = checkout
  ob = checkout -b
  master = checkout -B master origin/master
  om = !git fetch origin master && git checkout origin/master
  o- = o -
  # cherry-pick
  pk = cherry-pick
  # diff
  d = "diff --minimal --word-diff=color --word-diff-regex='[^[:space:],;=(){}?]+|[,;=(){}?]+'"
  conflicts-list = diff --name-only --diff-filter=U
  conflicts-edit = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; editor `f`"
  conflicts-add = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`"
  # fetch
  f = fetch
  fo = fetch origin
  fu = fetch upstream
  # log
  l = !git --no-pager log --color --graph --pretty="tformat:'%Cred%h\t%Creset\t%C(green)%cr\t%C(magenta)%an\t%Creset%s %C(yellow)%d%Creset'" --abbrev-commit -9 | column -ts'\t'
  l19 = !git --no-pager log --color --graph --pretty="tformat:'%Cred%h\t%Creset\t%C(green)%cr\t%C(magenta)%an\t%Creset%s %C(yellow)%d%Creset'" --abbrev-commit -19 | column -ts'\t'
  lb = "!git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD)%(color:yellow)%(refname:short)\t%(color:green)%(committerdate:relative)\t%(color:magenta)%(authorname)\t%(color:reset)%(subject)%(color:reset)' | column -ts'\t'"
  lob = "!git branch -r | grep -v HEAD | while read b; do git log --color --format='%ci _%C(magenta)%cr\t %C(bold cyan)'$b'%Creset %s %C(bold blue)<%an>%Creset' $b | head -n 1; done | sort -r | cut -d_ -f2- | sed 's;origin/;;g' | head -10"
  # pull
  pl = pull
  plu = pull -u
  plom = pull origin master
  # push
  ph = push
  phu = push -u
  phf = push --force-with-lease
  backup = push --mirror backup
  # pull + push
  pp = !git pull && git push
  # reset
  unstage = reset HEAD
  # status
  st = status --short --branch

[merge]
  stat = true
  tool = code

[filter "hawser"]
  clean = git hawser clean %f
  smudge = git hawser smudge %f
  required = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[commit]
  gpgsign = true
[tag]
  gpgsign = true
[diff "nodiff"]
  command = /usr/bin/true
[url "ssh://git@github.com"]
  insteadOf = https://github.com

